name: Build and Deploy to Production

on:
  # Automatic deployment when pushing to main
  push:
    branches:
      - main

  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production

# Required for GHCR authentication
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  GITHUB_USERNAME: tejgandham

jobs:
  # ============================================================================
  # JOB 1: RUN TESTS
  # ============================================================================
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: make install-all

      - name: Start PostgreSQL
        run: docker compose -f docker-compose.dev.yml up -d

      - name: Run all tests
        run: make test-all

      - name: Stop PostgreSQL
        if: always()
        run: docker compose -f docker-compose.dev.yml down

  # ============================================================================
  # JOB 2: BUILD AND PUSH BACKEND IMAGE
  # ============================================================================
  build-and-push-backend:
    needs: [test]
    runs-on: ubuntu-latest
    name: Build Backend Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/parchmark-backend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/parchmark-backend:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/parchmark-backend:buildcache,mode=max

  # ============================================================================
  # JOB 3: BUILD AND PUSH FRONTEND IMAGE
  # ============================================================================
  build-and-push-frontend:
    needs: [test]
    runs-on: ubuntu-latest
    name: Build Frontend Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/parchmark-frontend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          file: ./ui/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/parchmark-frontend:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/parchmark-frontend:buildcache,mode=max

  # ============================================================================
  # JOB 4: DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-to-production:
    needs: [build-and-push-backend, build-and-push-frontend]
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production  # Requires manual approval if configured

    steps:
      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          command_timeout: 30m
          script: |
            # Enhanced error handling: exit on error, undefined vars, pipe failures
            set -Eeuo pipefail
            trap 'echo "‚ùå Deployment failed at line $LINENO"; exit 1' ERR

            echo "üöÄ Starting deployment to production..."

            # Navigate to project directory
            cd /home/deploy/parchmark

            # Pull latest code (for docker-compose.yml updates)
            echo "üì• Pulling latest configuration..."
            git pull origin main

            # Login to GHCR with read-only token
            echo "üîê Authenticating with GHCR..."
            echo "${{ secrets.GHCR_PULL_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull new images
            echo "üì¶ Pulling new Docker images..."
            docker compose -f docker-compose.prod.yml pull backend frontend

            # Run database migrations (if script exists)
            # IMPORTANT: Migrations must succeed before deploying new code
            if [ -f "backend/scripts/migrate.sh" ]; then
              echo "üóÑÔ∏è Running database migrations..."
              docker compose -f docker-compose.prod.yml exec -T backend bash /app/scripts/migrate.sh
            fi

            # Update services (--no-deps avoids restarting postgres)
            echo "üîÑ Updating services..."
            docker compose -f docker-compose.prod.yml up -d --no-deps backend frontend

            # Brief stabilization period (health checks handle startup timing)
            echo "‚è≥ Waiting for containers to initialize..."
            sleep 5

            # Health check backend with retries and exponential backoff
            echo "üè• Checking backend health (with retries)..."
            curl -f -s --show-error \
              --connect-timeout 3 \
              --max-time 5 \
              --retry 12 \
              --retry-delay 5 \
              --retry-all-errors \
              https://assets-api.engen.tech/api/health || {
              echo "‚ùå Backend health check failed after retries!"
              exit 1
            }

            # Health check frontend with retries and exponential backoff
            echo "üè• Checking frontend health (with retries)..."
            curl -f -s --show-error \
              --connect-timeout 3 \
              --max-time 5 \
              --retry 12 \
              --retry-delay 5 \
              --retry-all-errors \
              -o /dev/null \
              https://notes.engen.tech/ || {
              echo "‚ùå Frontend health check failed after retries!"
              exit 1
            }

            # Cleanup old images (keep last 7 days)
            echo "üßπ Cleaning up old images..."
            docker image prune -f --filter "until=168h" || true

            # Logout from GHCR
            docker logout ghcr.io

            echo "‚úÖ Deployment successful!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "::notice::‚úÖ Deployment to production completed successfully!"
          echo "Backend: https://assets-api.engen.tech"
          echo "Frontend: https://notes.engen.tech"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "::error::‚ùå Deployment failed! Check logs above."
          exit 1

  # ============================================================================
  # JOB 5: POST-DEPLOYMENT NOTIFICATION
  # ============================================================================
  notify-deployment:
    needs: [deploy-to-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment summary
        run: |
          if [ "${{ needs.deploy-to-production.result }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "- Images built and pushed to GHCR"
            echo "- Services updated on production server"
            echo "- Health checks passed"
            echo ""
            echo "üîó Production URLs:"
            echo "- Frontend: https://notes.engen.tech"
            echo "- Backend: https://assets-api.engen.tech"
            echo "- API Docs: https://assets-api.engen.tech/docs"
          else
            echo "‚ùå Deployment failed!"
            echo "Check the logs above for details."
            exit 1
          fi
