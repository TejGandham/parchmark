version: '3.8'

services:
  # Frontend service
  parchmark-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - parchmark-backend
    restart: unless-stopped
    networks:
      - parchmark-network

  # Backend API service
  parchmark-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://parchmark:parchmark@postgres:5432/parchmark
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=development
      - DEBUG=true
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app  # Mount source code for development
    restart: unless-stopped
    networks:
      - parchmark-network

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=parchmark
      - POSTGRES_PASSWORD=parchmark
      - POSTGRES_DB=parchmark
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U parchmark -d parchmark"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - parchmark-network

volumes:
  postgres_data:
    driver: local

networks:
  parchmark-network:
    driver: bridge


